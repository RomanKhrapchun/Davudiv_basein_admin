const { Paragraph, TextRun, patchDocument, TableRow, TableCell, Table, VerticalAlign, HeadingLevel, PatchType, AlignmentType, WidthType, ExternalHyperlink, ImageRun } = require('docx')
const { addRequisiteToLandDebt,addRequisiteToWaterDebt } = require('./function');
const { territory_title, territory_title_instrumental, phone_number_GU_DPS, website_name, website_url, telegram_name, telegram_url } = require('./constants');
const fs = require('fs').promises

const oneCellWidth = {
    size: 750,
    type: WidthType.PERCENTAGE
}

const addRow = (body) => {
    return body.map((el) => {
        return new TableRow({
            children: [
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({ text: el?.label, font: "Times New Roman", size: 26, bold: true })
                            ],
                            alignment: AlignmentType.CENTER,
                        })
                    ],
                    width: oneCellWidth,
                    verticalAlign: 'center',
                }),
                new TableCell({
                    children: [
                        new Paragraph({
                            children: [
                                new TextRun({ text: el?.value, font: "Times New Roman", size: 26, })
                            ],
                            alignment: AlignmentType.CENTER,
                        })
                    ],
                    width: oneCellWidth,
                    verticalAlign: 'center',
                }),
            ],
        })
    })

};





const createRequisiteWord = async (body, requisite) => {
    try {
        console.log("body", body);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .flat() –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –º–æ–∂–ª–∏–≤–∏—Ö –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –º–∞—Å–∏–≤—ñ–≤
        const debts = addRequisiteToLandDebt(body, requisite).flat();

        console.log("üìå debts –ø—ñ—Å–ª—è .flat():", debts);

        if (!Array.isArray(debts) || debts.length === 0) {
            throw new Error("‚ùå –ü–û–ú–ò–õ–ö–ê: debts –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ —î –º–∞—Å–∏–≤–æ–º!");
        }

        const docBuffer = await fs.readFile("./files/doc1.docx");

        let totalAmount = 0; // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö –±–æ—Ä–≥—ñ–≤

        const children = debts.map((debt, index) => {
            totalAmount += parseFloat(debt.amount || 0); // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏

            return [
		new Paragraph({ children: [new TextRun({ text: " " })] }),
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({ 
                            text: `          ${index + 1}. ${debt.debtText}`, // –î–æ–¥–∞—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é
                            font: "Times New Roman",
                            size: 26
                        }),
                    ],
                }),
                new Paragraph({
                    alignment: AlignmentType.CENTER,
                    children: [
                        new TextRun({ text: `{{requisiteText${index}}}`, font: "Times New Roman", size: 26 }),
                    ],
                }),
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({ text: `{{table${index}}}`, font: "Times New Roman", size: 26 }),
                    ],
                }),
                /*new Paragraph({
                    alignment: AlignmentType.RIGHT,
                    children: [
                        new TextRun({
                            text: `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ—Ä–≥—É –ø–æ —Ü—ñ–π —Ç–∞–±–ª–∏—Ü—ñ: ${debt.amount} –≥—Ä–Ω`,
                            font: "Times New Roman",
                            size: 26,
                            bold: true
                        }),
                    ],
                }),*/
                //new Paragraph({ children: [new TextRun({ text: " " })] }),
            ];
        }).flat();

        const patches = {
            next: { type: PatchType.DOCUMENT, children },
            name: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: body.name, font: "Times New Roman", size: 26, bold: true })
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
            ident: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `—ñ.–∫. –•–•–•–•–•–•–•${body.identification}`, font: "Times New Roman", size: 24, bold: true, italics: true })
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
            debt_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          ${territory_title} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–∞–Ω–∏—Ö –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ, —Å—Ç–∞–Ω–æ–º ${new Intl.DateTimeFormat('uk-UA', {
                                    day: '2-digit',
                                    month: 'long',
                                    year: 'numeric',
                                }).format(new Date(body.date))} —É –í–∞—Å –Ω–∞—è–≤–Ω–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É ${territory_title_instrumental},  –∞ —Å–∞–º–µ:`,
                                font: "Times New Roman",
                                size: 26
                            })
                        ],
                    })
                ],
            },
            gu_dps: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –í —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –ø–æ –¥–∞–Ω—ñ–π –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —É –ì–£ –î–ü–° —É –õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone_number_GU_DPS}.`,
                                font: "Times New Roman",
                                size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            sanction_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –ü—Ä–æ—Å–∏–º–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ–≥–∞—Å–∏—Ç–∏ —É—Ç–≤–æ—Ä–µ–Ω—É –í–∞–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –±—é–¥–∂–µ—Ç—É ${territory_title_instrumental}. –ù–µ—Å–≤–æ—î—á–∞—Å–Ω–∞ —Å–ø–ª–∞—Ç–∞ —Å—É–º–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø–µ–Ω—ñ.`,
                                font: "Times New Roman",
                                size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            footer_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `          –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –º–æ–∂–Ω–∞ —É –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞—Ö ¬´${website_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: website_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: website_url,
                            }),
                            new TextRun({ text: ` –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´${telegram_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: telegram_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: telegram_url,
                            }),
                            new TextRun({ text: `. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.`, font: "Times New Roman", size: 24 }),
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            image: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: await fs.readFile("./files/qr-code.png"),
                                transformation: {
                                    width: 128,
                                    height: 128,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
        };

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ debt
        debts.forEach((debt, index) => {
            patches[`debtText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debt.debtText || "‚ùå –ü–û–ú–ò–õ–ö–ê: –¢–µ–∫—Å—Ç –±–æ—Ä–≥—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
                        font: "Times New Roman",
                        size: 26
                    })
                ],
            };

            patches[`requisiteText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: debt.requisiteText || "‚ùå –ü–û–ú–ò–õ–ö–ê: –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ",
                        font: "Times New Roman",
                        bold: true,
                        size: 26
                    })
                ],
            };

             patches[`table${index}`] = {
                type: PatchType.DOCUMENT,
                children: [
                    new Table({
                        rows: [
                            ...addRow(debt.table || []),
                            new TableRow({
                                children: [
                                    new TableCell({
                                        width: { size: 50, type: WidthType.PERCENTAGE },
                                        children: [
                                            new Paragraph({
                                                alignment: AlignmentType.CENTER,
                                                children: [
                                                    new TextRun({ 
                                                        text: "–°—É–º–∞", 
                                                        font: "Times New Roman", 
                                                        bold: true, 
                                                        size: 24 
                                                    })
                                                ]
                                            })
                                        ],
                                    }),
                                    new TableCell({
                                        width: { size: 50, type: WidthType.PERCENTAGE },
                                        children: [
                                            new Paragraph({
                                                alignment: AlignmentType.CENTER,
                                                children: [
                                                    new TextRun({ 
                                                        text: `${debt.amount} –≥—Ä–Ω`, 
                                                        font: "Times New Roman",  
                                                        size: 24
                                                    })
                                                ]
                                            })
                                        ],
                                    }),
                                ],
                            }),
                        ]
                    })
                ],
            };
        });

        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø—ñ—Å–ª—è —Ü–∏–∫–ª—É
        patches[`totalAmount`] = {
            type: PatchType.DOCUMENT,
            children: [
                new Paragraph({
                    alignment: AlignmentType.LEFT,
                    children: [
                        new TextRun({
                            text: `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ—Ä–≥—É –ø–æ –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö: ${totalAmount.toFixed(2)} –≥—Ä–Ω`,
                            font: "Times New Roman",
                            size: 22, // –ú–µ–Ω—à–∏–π —à—Ä–∏—Ñ—Ç
                            bold: true
                        }),
                    ],
                }),
            ],
        };

        const patchedDoc = await patchDocument(docBuffer, { patches });
        return patchedDoc;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
        return false;
    }
};




const createUtilitiesRequisiteWord = async (body, requisite) => {
    try {
        if (!Array.isArray(body)) {
            throw new Error("body –º–∞—î –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º");
        }

        const debts = body.map(item => {
            const result = addRequisiteToWaterDebt(item, requisite);
            if (!result) {
                console.warn("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: addRequisiteToWaterDebt –ø–æ–≤–µ—Ä–Ω—É–ª–∞ undefined –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è", item);
            }
            return result;
        }).flat().filter(Boolean); // –í–∏–¥–∞–ª—è—î–º–æ undefined

        console.log("debts",debts);

        const docBuffer = await fs.readFile("./files/docWater.docx");

        const children = debts.map((_, index) => [
            new Paragraph({
                alignment: AlignmentType.LEFT,
                children: [
                    new TextRun({ text: `{{debtText${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
            new Paragraph({
                alignment: AlignmentType.CENTER,
                children: [
                    new TextRun({ text: `{{requisiteText${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
            new Paragraph({
                alignment: AlignmentType.LEFT,
                children: [
                    new TextRun({ text: `{{table${index}}}`, font: "Times New Roman", size: 26 }),
                ],
            }),
        ]).flat();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞
        let formattedDate;
        try {
            formattedDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
            }).format(new Date(body[0].date));
        } catch (error) {
            console.warn("‚ùó –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞.");
            formattedDate = new Intl.DateTimeFormat('uk-UA', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
            }).format(new Date());
        }

        const patches = {
            next: {
                type: PatchType.DOCUMENT,
                children,
            },
            name: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: body[0].fio, font: "Times New Roman", size: 26, bold: true })
                        ],
                        alignment: AlignmentType.CENTER
                    })
                ],
            },
            ident: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `—ñ.–∫. ${body[0].payerident}`, font: "Times New Roman", size: 24, bold: true, italics: true })
                        ],
                        alignment: AlignmentType.CENTER
                    })
                ],
            },
            debt_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          ${territory_title} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞—è–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö, —Å—Ç–∞–Ω–æ–º –Ω–∞ ${formattedDate} —É –í–∞—Å —ñ—Å–Ω—É—î –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –∑ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ –ø–µ—Ä–µ–¥ ${territory_title_instrumental}.`,
                                font: "Times New Roman", size: 26
                            })
                        ],
                    })
                ],
            },
            support_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ü—ñ—î—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: ${phone_number_GU_DPS}.`,
                                font: "Times New Roman", size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            sanction_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `          –ü—Ä–æ—Å–∏–º–æ –≤–∞—Å —Å–≤–æ—î—á–∞—Å–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤–∏—Ö —à—Ç—Ä–∞—Ñ–Ω–∏—Ö —Å–∞–Ω–∫—Ü—ñ–π —Ç–∞ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥.`,
                                font: "Times New Roman", size: 24
                            })
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            footer_info: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new TextRun({ text: `          –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å —Ç–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ ¬´${website_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: website_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: website_url,
                            }),
                            new TextRun({ text: ` –∞–±–æ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ Telegram ¬´${telegram_name}¬ª `, font: "Times New Roman", size: 24 }),
                            new ExternalHyperlink({
                                children: [
                                    new TextRun({
                                        text: telegram_url,
                                        font: "Times New Roman",
                                        size: 24,
                                        color: "0000FF",
                                        underline: {}
                                    }),
                                ],
                                link: telegram_url,
                            }),
                            new TextRun({ text: `. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —Å—Ç–∞–Ω—É –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —ó—ó –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é QR-–∫–æ–¥—É, —â–æ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –Ω–∏–∂—á–µ.`, font: "Times New Roman", size: 24 }),
                        ],
                        alignment: AlignmentType.LEFT
                    })
                ],
            },
            image: {
                type: PatchType.DOCUMENT,
                children: [
                    new Paragraph({
                        children: [
                            new ImageRun({
                                data: await fs.readFile("./files/qr-code.png"),
                                transformation: {
                                    width: 128,
                                    height: 128,
                                },
                            }),
                        ],
                        alignment: AlignmentType.RIGHT
                    })
                ],
            },
        };

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ debt
        debts.forEach((debt, index) => {
            patches[`debtText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: `${debt.debtText}`,
                        font: "Times New Roman",
                        size: 26
                    })
                ],
            };

            patches[`requisiteText${index}`] = {
                type: PatchType.PARAGRAPH,
                children: [
                    new TextRun({
                        text: `${debt.requisiteText}`,
                        font: "Times New Roman",
                        bold: true,
                        size: 26
                    })
                ],
            };

            patches[`table${index}`] = {
                type: PatchType.DOCUMENT,
                children: [
                    new Table({
                        rows: addRow(debt.table)
                    })
                ],
            };
        });

        const patchedDoc = await patchDocument(docBuffer, { patches });
        return patchedDoc;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
        return false;
    }
};



module.exports = {
    createRequisiteWord,
    createUtilitiesRequisiteWord
}







